// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NFTMarketplace {
    address public 

    NFT[] public nftDisponibili;

    mapping(address => NFT[]) public nftDiUnUtente;

    event NFTInserito(address indexed proprietario, uint256 prezzo, string metadataURI);
    event NFTVenduto(address indexed compratore, address indexed venditore, uint256 prezzo);

    constructor(string memory _nome, string memory _simbolo, uint256 _costoDiInserzione) {
        owner = msg.sender;
        nome = _nome;
        simbolo = _simbolo;
        costoDiInserzione = _costoDiInserzione;
    }

    function inserisciNFT(uint256 _prezzo, string memory _metadataURI) external {
        require(_prezzo >= costoDiInserzione, "Il prezzo di inserzione non Ã¨ sufficiente.");
        nftDisponibili.push(NFT({
            proprietario: msg.sender,
            prezzo: _prezzo,
            metadataURI: _metadataURI
        }));
        nftDiUnUtente[msg.sender].push(nftDisponibili[nftDisponibili.length - 1]);
        emit NFTInserito(msg.sender, _prezzo, _metadataURI);
    }

    function acquistaNFT(uint256 _ind      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);ex) external payable {
        require(_index < nftDisponibili.length, "NFT non trovato.");
        NFT storage nft = nftDisponibili[_index];
        require(msg.value >= nft.prezzo, "Importo insufficiente.");
        address venditore = nft.proprietario;
        nft.proprietario = msg.sender;
        nft.prezzo = 0;
        payable(venditore).transfer(msg.value);
        emit NFTVenduto(msg.sender, venditore, msg.value);
    }      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);unction acquistaNFT(uint256 _ind      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);ex) external payable {
        require(_index < nftDisponibili.length, "NFT non trovato.");
        NFT storage nft = nftDisponibili[_index];
        require(msg.value >= nft.prezzo, "Importo insufficiente.");
        address venditore = nft.proprietario;
        nft.proprietario = msg.sender;
        nft.prezzo = 0;
        payable(venditore).transfer(msg.value);
        emit NFTVenduto(msg.sender, venditore, msg.value);
    }      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);
}unction acquistaNFT(uint256 _ind      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);ex) external payable {
        require(_index < nftDisponibili.length, "NFT non trovato.");
        NFT storage nft = nftDisponibili[_index];
        require(msg.value >= nft.prezzo, "Importo insufficiente.");
        address venditore = nft.proprietario;
        nft.proprietario = msg.sender;
        nft.prezzo = 0;
        payable(venditore).transfer(msg.value);
        emit NFTVenduto(msg.sender, venditore, msg.value);
    }      nft.prezzo = 0;
        payable(venditore).transfer(msg.value);
